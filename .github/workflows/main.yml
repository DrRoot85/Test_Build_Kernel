name: Build and Release Kernel

on:
  push:
    branches:
      - main  # Trigger on push to the main branch
  workflow_dispatch:  # Allow manual triggering

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout test repository
      uses: actions/checkout@v3

    - name: Install dependencies
      run: |
        sudo apt update -y
        sudo apt install -y default-jdk git gnupg flex bison gperf build-essential zip curl \
          libc6-dev libncurses-dev libx11-dev libreadline-dev libgl1 libgl1-mesa-dev \
          python3 make sudo gcc g++ bc grep tofrodos python3-markdown libxml2-utils xsltproc \
          zlib1g-dev python-is-python3 libc6-dev libtinfo6 make repo cpio kmod openssl \
          libelf-dev pahole libssl-dev

    - name: Clone kernel repository
      run: git clone https://github.com/samsung-sm8550/kernel_samsung_sm8550-common

    - name: Navigate to kernel directory
      run: |
        cd kernel_samsung_sm8550-common
        echo "Current directory: $(pwd)"

    - name: Run patch.sh from test repository
      run: |
        chmod +x ../patch.sh
        ../patch.sh

    - name: Debug kernel directory structure
      run: |
        echo "Contents of kernel_samsung_sm8550-common:"
        ls -R kernel_samsung_sm8550-common

    - name: Copy Image.gz to assets folder
      run: |
        mkdir -p ../assets
        if [ -f "out/arch/arm64/boot/Image.gz" ]; then
          cp out/arch/arm64/boot/Image.gz ../assets/
        else
          echo "Error: Image.gz not found in the expected location!"
          exit 1
        fi

    - name: Compress assets folder
      run: |
        cd ..
        zip -r common-5.15.175.zip assets

    - name: Get latest release tag
      id: get_latest_tag
      run: |
        LATEST_TAG=$(curl -s https://api.github.com/repos/${{ github.repository }}/releases/latest | grep -oP '"tag_name": "\K.*?(?=")')
        if [ -z "$LATEST_TAG" ]; then
          echo "No previous releases found. Starting with v1.0.0"
          echo "new_tag=v1.0.0" >> $GITHUB_OUTPUT
        else
          echo "Latest tag: $LATEST_TAG"
          # Increment the patch version (e.g., v1.0.0 -> v1.0.1)
          NEW_TAG=$(echo $LATEST_TAG | awk -F. '{printf("%s.%s.%d", $1, $2, $3+1)}')
          echo "New tag: $NEW_TAG"
          echo "new_tag=$NEW_TAG" >> $GITHUB_OUTPUT
        fi

    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.get_latest_tag.outputs.new_tag }}
        release_name: Release ${{ steps.get_latest_tag.outputs.new_tag }}
        draft: false
        prerelease: false

    - name: Upload Release Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./common-5.15.175.zip
        asset_name: common-5.15.175.zip
        asset_content_type: application/zip
